import instance, { Base } from "@/util/axios";
import { GetServerSideProps } from "next";
import { Playlist } from "@/pages/api/playlist";
import { Cover } from "@/components/main/Recommendation";
import styles from "./playlistPage.module.css"
import { Avatar } from "@/layouts/Aside";
import Head from "next/head";
import Link from "next/link";
import { Song } from "../api/song";
import { ArtistList } from "@/components/player/SongInfo";
import { useContext, useState } from "react";
import { PlayerContext, PlayerContextProps } from "@/components/player/Player";

const axios = instance(Base.IN);

// runs on the server side
/**
 * 在 Next.js 中，如果我们创建一个带有动态路由参数的页面，
 * 例如 /playlist/[playlistid].js，那么每当访问这个页面时，
 * Next.js 都会在服务器上渲染这个页面，
 * 并且为每个请求提供一个唯一的 params 对象，
 * 它包含了当前请求的路由参数。
 */
export const getServerSideProps: GetServerSideProps = async ({ params }) => {
    const ID = params?.playlistid as string;

    const playlist = await Playlist.fetchInfoAsync(ID);

    return {
        props: {
            serializedPlaylist: JSON.stringify(playlist)
        }
    };
}

type PlaylistPageProps = {
    serializedPlaylist: string
}

// 歌单页面
export default function PlaylistPage(props: PlaylistPageProps) {
    const playlist: Playlist = JSON.parse(props.serializedPlaylist);
    const player = useContext(PlayerContext);

    return (
        <div className={styles.playlistPage}>
            <Head>
                <title>{playlist.name}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <PlaylistInfo playlist={playlist} player={player} />
            <TrackList playlist={playlist} player={player} />
        </div>
    );
}

type PlaylistInfoProps = {
    playlist: Playlist,
    player: PlayerContextProps
}

function PlaylistInfo(props: PlaylistInfoProps) {
    const playlist = props.playlist;
    const player = props.player;

    return (
        <div className={styles.playlistInfo}>
            <Cover
                ID={playlist.ID!}
                name={playlist.name!}
                coverUrl={playlist.coverImgUrl!}
                size={270}
                radius={10}
                type="playlist"
                glow={true}
                offset={12}
                intensity={1}
            />
            <Info playlist={playlist} player={player} />
        </div>
    );
}

function Info(props: PlaylistInfoProps) {
    const playlist = props.playlist;
    const creator = playlist.creator;
    const date = new Date(playlist.createTime!);

    return (
        <div className={styles.info}>
            <div className={styles.title}>
                {playlist.name}
            </div>
            <div className={styles.avatarAndName}>
                <Link href={"/user/" + creator?.userId} style={{
                    display: "flex"
                }}>
                    <Avatar
                        profile={creator}
                        size={30}
                    />
                    <div className={styles.username}>
                        {creator?.nickname}
                    </div>
                </Link>
                <div className={styles.date}>
                    {date.getFullYear() + "年" + (date.getMonth() + 1) + "月" + date.getDate() + "日创建"}
                </div>
            </div>
            <div className={styles.description}>
                {playlist.description}
            </div>
        </div>
    );
}

export function TrackList(props: PlaylistInfoProps) {
    const playlist = props.playlist;
    const player = props.player;

    return (
        <div className={styles.trackList}>
            <div className={styles.columnTitle}>
                <div>歌曲</div>
                <div>艺人</div>
                <div>专辑</div>
                <div>时长</div>
            </div>
            {
                playlist.tracks?.map((track, index) => {
                    const color = index % 2 === 0 ? "#232323" : "#23232300";
                    return (
                        <span key={track.ID}>
                            <Track
                                player={player}
                                index={index}
                                song={track}
                                color={color}
                                doubleClickHandler={async () => {
                                    if (playlist.ID !== undefined) {
                                        await player.initPlaylistByID(playlist.ID!, index);
                                    } else {
                                        await player.initPlaylist(playlist, index);
                                    }
                                }}
                            />
                        </span>
                    )
                })
            }
        </div>
    );
}

type TrackProps = {
    player: PlayerContextProps,
    index: number;
    song: Song;
    color: string;
    doubleClickHandler: () => {}
}

function Track(props: TrackProps) {
    const player = props.player;
    const song = props.song;
    const minute = Math.floor(Number(song.duration) / 1000 / 60);
    const second = Math.floor(Number(song.duration) / 1000);
    const defaultColor = props.color;
    const [color, setColor] = useState(defaultColor);

    const isCurrent = () => {
        return player.currentTrack()?.ID === song.ID;
    }

    return (
        <div className={styles.track}
            style={{
                background: isCurrent() ? "linear-gradient(to right, #bbe8ff, #c0bbff)" : color,
                color: isCurrent() ? "#2749b6" : "#aeaeae",
                border: "1px solid",
                borderColor: isCurrent() ? "#2749b6" : "#2749b600",
                position: "relative"
            }}
            onDoubleClick={() => {
                props.doubleClickHandler();
            }}
            onMouseEnter={() => {
                if (!isCurrent()) {
                    setColor("#3b3b3b");
                }
            }}
            onMouseLeave={() => {
                if (!isCurrent()) {
                    setColor(defaultColor);
                }
            }}
        >
            <div className={styles.songName}
                style={{ zIndex: 2 }}
            >
                <Cover
                    type="album"
                    ID={song.album?.ID!}
                    name={song.album?.name!}
                    coverUrl={song.coverUrl!}
                    size={40}
                    radius={5}
                // glow={true}
                // offset={0}
                // intensity={.4}
                />
                <span style={{
                    margin: 10,
                    color: isCurrent() ? "#2749b6" : "#eeeeee",
                }}
                >
                    {song.name}
                </span>
            </div>
            <div className={styles.artists}
                style={{ zIndex: 2 }}
            >
                <ArtistList
                    artists={song.artists}
                    fontSize="small"
                    color={isCurrent() ? "#2749b6" : "#aeaeae"}
                />
            </div>
            <div className={styles.albumName}
                style={{ zIndex: 2 }}
            >
                <Link href={"/album/" + song.album?.ID}>
                    {song.album?.name}
                </Link>
            </div>
            <div className={styles.duration}
                style={{ zIndex: 2 }}
            >
                {minute + ":" + (second % (minute * 60) < 10 ? ("0" + second % (minute * 60)) : (second % (60)))}
            </div>
            {
                isCurrent() ?
                    <div
                        className={styles.shadow}
                        style={{
                            width: "100%",
                            height: "100%",
                            borderRadius: "5px",
                            filter: "blur(10px) opacity(.5)",
                            background: "linear-gradient(to right, #bbe8ff, #c0bbff)"
                        }}
                    >
                    </div> :
                    <></>
            }
        </div>
    )
}