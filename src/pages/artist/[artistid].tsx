import { GetServerSideProps } from "next";
import styles from "./artistPage.module.css";
import { Artist } from "../api/artist";
import instance, { Base } from "@/util/axios";
import { Song } from "../api/song";
import { Album } from "../api/album";
import Head from "next/head";
import { Cover } from "@/components/main/Recommendation";
import { PlayerContext, PlayerContextProps } from "@/components/player/Player";
import { type } from "os";
import { useContext, useState } from "react";
import { Playlist } from "../api/playlist";
import { ArtistList } from "@/components/player/SongInfo";

export const getServerSideProps: GetServerSideProps = async ({ params }) => {
    const axios = instance(Base.IN);
    const ID = params?.artistid as string;

    const artist: Artist = await Artist.fetchInfoAsync(ID);

    const hotSongs: Song[] = await axios.get("/api/artist/hot", {
        params: {
            id: ID
        }
    });

    const albums: Album[] = await axios.get("/api/artist/albums", {
        params: {
            id: ID
        }
    });

    return {
        props: {
            artist,
            hotSongs,
            albums
        }
    };
}

type ArtistPageProps = {
    artist: Artist
    hotSongs: Song[]
    albums: Album[]
}

// 歌手页面
export default function ArtistPage(props: ArtistPageProps) {
    const artist = props.artist;
    const albums = props.albums;
    const hotSongs = props.hotSongs.map(track => {
        return new Song(
            track.ID,
            {
                name: track.name,
                coverUrl: track.coverUrl,
                artists: track.artists,
                duration: track.duration,
                album: track.album,
            }
        )
    });

    return (
        <div className={styles.artistPage}>
            <Head>
                <title>{artist.name}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <ArtistInfo artist={artist} />
            <div style={{
                display: "flex",
                // backgroundColor:"#123",
                marginLeft: "40px",
                marginRight: "40px",
            }}>
                {
                    albums.length !== 0 ? <LatestRelease album={albums[0]} /> : <></>
                }
                <TrackGrid tracks={hotSongs} />
            </div>
            <div
                style={{
                    margin: "40px",
                }}
            >
                <AlbumGrid albums={albums} />
            </div>
        </div>
    )
}

function ArtistInfo(props: { artist: Artist }) {
    const artist = props.artist;

    return (
        <div className={styles.artistInfo}>
            <Cover
                ID={artist.ID}
                name={artist.name!}
                coverUrl={artist.avatarUrl!}
                size={270}
                radius={135}
                type="artist"
            // glow={true}
            // offset={12}
            />
            <Info artist={artist} />
        </div>
    )
}

function Info(props: { artist: Artist }) {
    const artist = props.artist;

    return (
        <div className={styles.info}>
            <div className={styles.title}>
                {artist.name}
            </div>
            <div className={styles.avatarAndName}>
                <div className={styles.statistics}>
                    {artist.musicSize + " 首歌 · " + artist.albumSize + " 张专辑 · " + artist.mvSize + " 个MV"}
                </div>
            </div>
            <div className={styles.description}>
                {artist.description}
            </div>
        </div>
    )
}

function LatestRelease(props: { album: Album }) {
    const album = props.album;
    const date = new Date(album.date!);

    return (
        <div className={styles.latestRelease}>
            <div style={{
                color: "#ededed",
                fontWeight: "bold",
                marginBottom: "15px"
            }}>
                最新发行
            </div>
            <div style={{
                display: "flex",
                // backgroundColor: "#123",
                alignItems: "center",
                // position: "relative",
            }}>
                <Cover
                    ID={album.ID}
                    name={album.name!}
                    coverUrl={album.coverImgUrl!}
                    size={166}
                    radius={10}
                    type="album"
                    glow={true}
                    offset={12}
                    intensity={0.5}
                />
                <div style={{
                    marginLeft: "20px",
                    color: "#ededed",
                    display: "flex",
                    flexDirection: "column"
                }}>
                    <span className={styles.name}>
                        {album.name}
                    </span>
                    <div style={{ display: "flex" }}>
                        <span className={styles.date}>
                            {date.getFullYear() + " 年 " + (date.getMonth() + 1) + " 月 " + date.getDate() + " 日发行"}
                        </span>
                    </div>
                    <span className={styles.amount}>
                        {album.tracks?.length + " 首歌曲"}
                    </span>
                </div>
            </div>
        </div>
    )
}

type TrackGridProps = {
    tracks: Song[],
}

function TrackGrid(props: TrackGridProps) {
    const player = useContext(PlayerContext);
    const tracks = props.tracks;
    const playlist = new Playlist(undefined, undefined, undefined, tracks);

    return (
        <div className={styles.trackGrid}>
            <div style={{
                color: "#ededed",
                fontWeight: "bold",
                marginBottom: "5px",
                paddingLeft: 10
            }}>
                热门单曲
            </div>
            <div className={styles.tracks}
            >
                {
                    playlist.tracks?.map((track, index) => {
                        return (
                            <span key={track.ID}>
                                <Track
                                    player={player}
                                    index={index}
                                    song={track}
                                    color="#00000000"
                                    doubleClickHandler={async () => {
                                        if (playlist.ID !== undefined) {
                                            await player.initPlaylistByID(playlist.ID!, index);
                                        } else {
                                            await player.initPlaylist(playlist, index);
                                        }
                                    }}
                                />
                            </span>
                        )
                    })
                }
            </div>
        </div>
    )
}

type TrackProps = {
    player: PlayerContextProps,
    index: number;
    song: Song;
    color: string;
    doubleClickHandler: () => {}
}

function Track(props: TrackProps) {
    const player = props.player;
    const song = props.song;
    const defaultColor = props.color;
    const [color, setColor] = useState(defaultColor);

    const isCurrent = () => {
        return player.currentTrack()?.ID === song.ID;
    }

    return (
        <div className={styles.track}
            style={{
                background: isCurrent() ? "linear-gradient(to right, #bbe8ff, #c0bbff)" : color,
                color: isCurrent() ? "#2749b6" : "#aeaeae",
                border: "1px solid",
                borderColor: isCurrent() ? "#2749b6" : "#2749b600",
                position: "relative"
            }}
            onDoubleClick={() => {
                props.doubleClickHandler();
            }}
            onMouseEnter={() => {
                if (!isCurrent()) {
                    setColor("#3b3b3b");
                }
            }}
            onMouseLeave={() => {
                if (!isCurrent()) {
                    setColor(defaultColor);
                }
            }}
        >
            <div className={styles.songName}>
                <div
                    style={{ zIndex: 2 }}
                >
                    <Cover
                        type="album"
                        ID={song.album?.ID!}
                        name={song.album?.name!}
                        coverUrl={song.coverUrl!}
                        size={40}
                        radius={5}
                    />
                </div>
                <div className={styles.trackInfo}
                    style={{ zIndex: 2 }}
                >
                    <span style={{
                        paddingBottom: 5,
                        marginLeft: 10,
                        color: isCurrent() ? "#2749b6" : "#eeeeee",
                        whiteSpace: "nowrap"
                    }}>
                        {song.name}
                    </span>
                    <div style={{
                        marginLeft: 10,
                        color: isCurrent() ? "#2749b6" : "#eeeeee",
                    }}>
                        <ArtistList
                            artists={song.artists}
                            fontSize="small"
                            color={isCurrent() ? "#2749b6" : "#aeaeae"}
                        />
                    </div>
                </div>
            </div>
            {
                isCurrent() ?
                    <div
                        className={styles.shadow}
                        style={{
                            width: "100%",
                            height: "100%",
                            borderRadius: "5px",
                            filter: "blur(5px) opacity(.5)",
                            background: "linear-gradient(to right, #bbe8ff, #c0bbff)"
                        }}
                    >
                    </div> :
                    <></>
            }
        </div>
    )
}

type AlbumGridProps = {
    albums: Album[],
}

function AlbumGrid(props: AlbumGridProps) {
    const albums = props.albums;

    // console.log(albums);

    return (
        <div className={styles.albumGrid}>
            <div style={{
                color: "#ededed",
                fontWeight: "bold",
                marginBottom: "15px",
                // paddingLeft: 10
            }}>
                专辑
            </div>
            <div className={styles.albums}>
                {
                    albums.map(album => {
                        const date = new Date(album.date!);
                        return (
                            <span key={album.ID} className={styles.album}>
                                <Cover
                                    ID={album.ID}
                                    name={album.name!}
                                    coverUrl={album.coverImgUrl!}
                                    size={244}
                                    radius={10}
                                    type={"album"}
                                    glow={true}
                                    offset={12}
                                    intensity={0.5}
                                />
                                <div className={styles.albumName}>
                                    <div style={{
                                        color: "#ededed",
                                        // display: "flex",
                                        flexDirection: "column",
                                        // alignItems: "center"
                                    }}>
                                        <span
                                            style={{
                                                fontSize: "small",
                                            }}
                                        >
                                            {album.name}
                                        </span>
                                        <div style={{
                                            display: "flex",
                                        }}>
                                            <span
                                                style={{
                                                    fontSize: "xx-small",
                                                    color: "#aaaaaa",
                                                    paddingTop: "2px"
                                                }}
                                            >
                                                {date.getFullYear() + " 年 " + (date.getMonth() + 1) + " 月 " + date.getDate() + " 日发行"}
                                            </span>
                                            {/* <span
                                                style={{
                                                    fontSize: "xx-small",
                                                    color: "#656565",
                                                    paddingLeft: "10px"
                                                }}
                                            >
                                                {album.tracks?.length + " 首歌曲"}
                                            </span> */}
                                        </div>
                                    </div>
                                </div>
                            </span>
                        )
                    })
                }
            </div>
        </div>
    )
}